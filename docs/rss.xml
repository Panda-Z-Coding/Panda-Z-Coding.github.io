<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Panda-Z的代码空间</title><link>https://Panda-Z-Coding.github.io</link><description>芸生浮梦,忆昔往已...</description><copyright>Panda-Z的代码空间</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/157597971?s=400&amp;u=c68a9ae6636ffca3ca3119ccdabba64a00b37e9b&amp;v=4</url><title>avatar</title><link>https://Panda-Z-Coding.github.io</link></image><lastBuildDate>Mon, 24 Jun 2024 03:29:10 +0000</lastBuildDate><managingEditor>Panda-Z的代码空间</managingEditor><ttl>60</ttl><webMaster>Panda-Z的代码空间</webMaster><item><title>常见-正则表达式😍</title><link>https://Panda-Z-Coding.github.io/post/chang-jian---zheng-ze-biao-da-shi-%F0%9F%98%8D.html</link><description># **_`常见-正则表达式😍`_**&#13;
&#13;
- **`匹配整数`**&#13;
```java&#13;
String regex = '-?[1-9]\\d*';&#13;
```&#13;
&#13;
- **`匹配浮点数`**&#13;
```java&#13;
String regex = '-?[0-9][0-9]*[.][0-9]+';&#13;
```&#13;
&#13;
- **`匹配 E-mail 形式`**&#13;
```java&#13;
String regex = '\\w+@\\w+\\.[a-z]+(\\.[a-z]+)?';&#13;
```&#13;
&#13;
- **`匹配身份证号码`**&#13;
```java&#13;
String regex = '[1-9][0-9]{16}[a-zA-Z0-9]{1}';&#13;
```&#13;
- **`匹配日期`**&#13;
```java&#13;
String year = '[1-9][0-9]{3}'; // 年限4位数&#13;
String month = '((0?[1-9])|(1[012]))' //用到 | 时要括号括起整个表达式&#13;
String day = '((0?[1-9])|([12][0-9])|(3[01]?))'&#13;
String regex = year + '[-./]' + mouth + '-./' + day;  //分隔符可DIY&#13;
```&#13;
- **`匹配URL`**&#13;
```java&#13;
String regex = '(https?|ftp)://[^\\s/$.?#].[^\\s]*';&#13;
```&#13;
这个正则表达式可以匹配HTTP和FTP协议的URL&#13;
&#13;
- **`匹配IP地址`**&#13;
```java&#13;
String regex = '\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b';&#13;
```&#13;
这个正则表达式可以匹配IPv4地址。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/chang-jian---zheng-ze-biao-da-shi-%F0%9F%98%8D.html</guid><pubDate>Sun, 23 Jun 2024 16:14:10 +0000</pubDate></item><item><title>正则表达式!启动!</title><link>https://Panda-Z-Coding.github.io/post/zheng-ze-biao-da-shi-%21-qi-dong-%21.html</link><description># **_`正则表达式!启动!`_**&#13;
&#13;
### 正则表达式与元字符&#13;
&#13;
#### _1.定义:_ &#13;
&gt;😎一个String对象的字符序列中具有特殊意义的字符叫做 **_元字符_** !&lt;br&gt;😮正则表达式是一个**String对象的字符序列**&#13;
&#13;
~~~java&#13;
public boolean matches(String regex); // 判断String对象的字符序列是否和参数regex的正则表达式匹配&#13;
~~~&#13;
&#13;
##### **_常用元字符表😍_**&#13;
&#13;
|`正则表达式`|`意义`|&#13;
|:----------|:-----|&#13;
|**.**|表示任何一个字符|&#13;
|**\\\\.**|代表 **.** 这个字符|&#13;
|**\\\\d**|0 ~ 9 任何一个数字|&#13;
|**\\\\D**|非数字字符|&#13;
|**\\\\s**|空格类字符，例 _\t \n \x0B(垂直制表符) \f(换页符) \r(回车符)_|&#13;
|**\\\\S**|非空格类|&#13;
|**\\\\w**|可用于标识符的字符|&#13;
|**\\\\W**|不能用于标识符|&#13;
|**\\\\p{Lower}**|小写a ~ z|&#13;
|**\\\\p{Upper}**|大写A ~ Z|&#13;
|**\\\\p{ASCII}**|ASCII码|&#13;
|**\\\\p{Alpha}**|字母|&#13;
|**\\\\p{Digit}**|0 ~ 9 任何数字|&#13;
|**\\\\p{Alnum}**|数字或者字母|&#13;
|**\\\\p{Punct}**|标点符号：键盘上面你能在数字和字母外打出来符号|&#13;
|**\\\\p{Graph}**|可视标点：\p{Alnum} \p{Punct}|&#13;
|**\\\\p{Print}**|可打印的|&#13;
|**\\\\p{Blank}**|空格或者制表符|&#13;
|**\\\\p{Cntrl}**|控制符：[\x00 ~\\x1F\\x7F] (附表1附加解释)|&#13;
&#13;
&gt;&gt;`补充说明`🤐 &lt;br&gt;**\\\\d 与 \\\\p{Digit}** 不同之处在于 &gt;&gt;&gt; 前者匹配的是ASCII码，而后者匹配的是Unicode码。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/zheng-ze-biao-da-shi-%21-qi-dong-%21.html</guid><pubDate>Sun, 23 Jun 2024 14:49:06 +0000</pubDate></item><item><title>String常用方法👌</title><link>https://Panda-Z-Coding.github.io/post/String-chang-yong-fang-fa-%F0%9F%91%8C.html</link><description># **_String常用方法👌_**&#13;
&#13;
### 「操作String的方法」&#13;
&#13;
```java&#13;
public int length()  // 获取长度&#13;
public boolean equals(String s) // 查看两个String对象是否相等&#13;
public boolean startsWith(String s) // 前缀是否是s&#13;
public boolean endsWith(String s) // 后缀是否是s&#13;
public int compareTo(String s) // 通过字典序比较，返回正值、0、负数&#13;
public boolean contains(String s) // 判断String对象里是否含有 s&#13;
public int indexOf(String s) // 返回首次出现s的位置&#13;
public int lastIndexOf(String s) // 返回最后一次出现s的位置&#13;
public String subString(int startpoint) // 获得一个从该位置到最后的新String对象&#13;
public String subString(int start,int end) // 类似上一个，可以指定最后的位置&#13;
public String trim() // 获得该对象去除前后空格的新对象&#13;
&#13;
```&#13;
&#13;
### 「String对象和基本数据类型的转换⇄」&#13;
&#13;
 _**String ➡️ 基本型**_&#13;
&#13;
~~~java&#13;
public static byte parseByte(String s) throws NumberFormatException&#13;
public static short parseShort(String s) throws NumberFormatException&#13;
public static long parseLong(String s) throws NumberFormatException&#13;
public static float parseFloat(String s) throws NumberFormatException&#13;
public static double parseDouble(String s) throws NumberFormatException&#13;
~~~&#13;
&#13;
_**基本型 ➡️ String**_&#13;
&#13;
```java&#13;
public static String valueOf(_数据类型_ n) //返回一个String对象的引用&#13;
```&#13;
&#13;
_**基本类型的进制表示**_&#13;
&#13;
~~~java&#13;
public static String toBinaryString(int i) // 返回i的二进制String表示&#13;
public static String toOctalString(int i) // 八进制&#13;
public static String toHexString(int i) // 十六进制&#13;
// int i 或者 long i 都可以&#13;
~~~&#13;
&#13;
_**main()方法的参数化💕**_&#13;
&#13;
​      main()方法中的args[] 可以接受从键盘上面键入的字符序列（相当于数组），在运行时可以像以下来键入&#13;
&#13;
&gt; java 主类名 数据1 数据2 ...&#13;
&#13;
### 「对象的String对象表示」&#13;
&#13;
对一个对象调用 toString() 方法会返回String对象的字符序列串&#13;
&#13;
&gt; 一般形式：&#13;
&gt;&#13;
&gt; 创建对象的类名@对象的引用的字符序列串&#13;
&#13;
🤔要注意的是：toString() 是Object类的方法，是可以被重写的&#13;
&#13;
&#13;
&#13;
### 「**String对象与字符数组、字节数组**」&#13;
&#13;
_**String对象与字符数组**_&#13;
&#13;
```java&#13;
public viod getChars(int start,int end,char c[],int offset) // 将String对象的字符序列start到end-1列放入数组里&#13;
public char[] toCharArray() //全部String的字符序列返回成一个字符数组&#13;
```&#13;
&#13;
_**String对象与字节数组**_&#13;
&#13;
&gt;String类中 **String(byte[])** 和 **String(byte[],int offset,int length)** 可以让我们用指定的字节数组的部分或者全部来创建String对象&#13;
&#13;
~~~java&#13;
public byte[] getBytes() // 用平台默认的字符编码将String对象放入字节数组用，并返回引用&#13;
public byte[] getBytes(String charsetName) // 指定字符编码。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/String-chang-yong-fang-fa-%F0%9F%91%8C.html</guid><pubDate>Sat, 22 Jun 2024 16:26:36 +0000</pubDate></item><item><title>「Java中的子类与继承基础知识」</title><link>https://Panda-Z-Coding.github.io/post/%E3%80%8CJava-zhong-de-zi-lei-yu-ji-cheng-ji-chu-zhi-shi-%E3%80%8D.html</link><description># **Java中的子类与继承基础知识**&#13;
&#13;
## 目录&#13;
&#13;
- [子类与父类](#子类与父类)&#13;
- [子类继承性](#子类继承性)&#13;
- [子类与对象](#子类与对象)&#13;
- [成员变量的隐蔽和方法重写](#成员变量的隐蔽和方法重写)&#13;
- [super关键字](#super关键字)&#13;
- [final关键字](#final关键字)&#13;
- [对象的上转型对象](#对象的上转型对象)&#13;
- [继承与多态](#继承与多态)&#13;
- [abstract类与abstract方法](#abstract类与abstract方法)&#13;
- [面向抽象编程](#面向抽象编程)&#13;
- [开-闭原则](#开-闭原则)&#13;
&#13;
## 子类与父类&#13;
&#13;
在Java中，通过**继承**机制，子类（Subclass）可以继承父类（Superclass）的属性和方法。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/%E3%80%8CJava-zhong-de-zi-lei-yu-ji-cheng-ji-chu-zhi-shi-%E3%80%8D.html</guid><pubDate>Sat, 22 Jun 2024 15:50:02 +0000</pubDate></item></channel></rss>