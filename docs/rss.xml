<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Panda-Z的代码空间</title><link>https://Panda-Z-Coding.github.io</link><description>芸生浮梦,忆昔往已...</description><copyright>Panda-Z的代码空间</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/157597971?s=400&amp;u=a97f3580e282268c6eafe9d807c5b1dfdf02d1d7&amp;v=4</url><title>avatar</title><link>https://Panda-Z-Coding.github.io</link></image><lastBuildDate>Thu, 27 Jun 2024 03:09:19 +0000</lastBuildDate><managingEditor>Panda-Z的代码空间</managingEditor><ttl>60</ttl><webMaster>Panda-Z的代码空间</webMaster><item><title>GUI小栗子-选择题</title><link>https://Panda-Z-Coding.github.io/post/GUI-xiao-li-zi---xuan-ze-ti.html</link><description># `一个简单的GUI程序`&#13;
&#13;
附带了注释了，应该能讲明白&#13;
&#13;
```java&#13;
import javax.swing.*;&#13;
import java.awt.*;&#13;
import java.awt.event.ActionEvent;&#13;
import java.awt.event.ActionListener;&#13;
&#13;
public class ExamGUI {&#13;
    public static void main(String[] args) {&#13;
        JFrame frame = new JFrame('学生考试系统');    //创建底层容器&#13;
        frame.setSize(400, 250);&#13;
&#13;
        JPanel panel = new JPanel();    //创建一个面板，方便管理&#13;
        frame.add(panel);&#13;
        placeComponents(panel); // 自己写的一个函数，用来控制这个面板&#13;
&#13;
        frame.setVisible(true);&#13;
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   //创建窗口必备两行代码&#13;
    }&#13;
&#13;
    private static void placeComponents(JPanel panel) {&#13;
        panel.setLayout(null); //设置为自由布局&#13;
&#13;
        //  流程：1.创建需要的组件 2.设置组件的位置或者其他初始化信息 3.add到容器里&#13;
&#13;
        JLabel questionLabel = new JLabel('问题：Java是由哪个公司开发的？'); //JLabel是一个标签&#13;
        questionLabel.setBounds(20, 20, 300, 30);   // 设置在面板里面的位置和大小&#13;
        panel.add(questionLabel);&#13;
&#13;
        JRadioButton option1 = new JRadioButton('A. Oracle');&#13;
        option1.setBounds(20, 50, 100, 30);&#13;
        panel.add(option1);&#13;
&#13;
        JRadioButton option2 = new JRadioButton('B. Microsoft');&#13;
        option2.setBounds(20, 80, 100, 30);&#13;
        panel.add(option2);&#13;
&#13;
        JRadioButton option3 = new JRadioButton('C. IBM');&#13;
        option3.setBounds(20, 110, 100, 30);&#13;
        panel.add(option3);&#13;
&#13;
        ButtonGroup group = new ButtonGroup();  // ButtonGroup 是一个不可见的组件，它可以把几个按钮绑定在一起，让它们只能选一个&#13;
        group.add(option1);&#13;
        group.add(option2);&#13;
        group.add(option3);&#13;
&#13;
        JButton submitButton = new JButton('提交');&#13;
        submitButton.setBounds(20, 140, 80, 30);&#13;
        panel.add(submitButton);&#13;
&#13;
        JLabel resultLabel = new JLabel();&#13;
        resultLabel.setBounds(120, 140, 200, 30);&#13;
        panel.add(resultLabel);&#13;
&#13;
        submitButton.addActionListener(new ActionListener() {   // 把submitButton注册成为一个监视器，匿名类做监视器，就不用再去写一个类了&#13;
            @Override                                           // 这一个方法里面要传入的是ActionListener的类或者子类&#13;
            public void actionPerformed(ActionEvent e) {        // 所以这里用 `匿名类` 重写了actionPerformed方法``&#13;
                if (option1.isSelected()) {                     // .isSelected() 用来查看谁被点击了&#13;
                    resultLabel.setText('答案正确！');&#13;
                } else {&#13;
                    resultLabel.setText('答案错误！');&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
}&#13;
```&#13;
&#13;
运行结果：⬇️&#13;
![Snipaste_2024-06-27_10-32-12](https://github.com/Panda-Z-Coding/Panda-Z-Coding.github.io/assets/157597971/ca1d7bf4-d167-4a4e-9cc0-caf6d62159b2)&#13;
。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/GUI-xiao-li-zi---xuan-ze-ti.html</guid><pubDate>Thu, 27 Jun 2024 02:34:51 +0000</pubDate></item><item><title>日期和时间的类的方法🤔</title><link>https://Panda-Z-Coding.github.io/post/ri-qi-he-shi-jian-de-lei-de-fang-fa-%F0%9F%A4%94.html</link><description>`java.time` 包提供了处理日期和时间的类，包括 `LocalDate`、`LocalDateTime` 和 `LocalTime`。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/ri-qi-he-shi-jian-de-lei-de-fang-fa-%F0%9F%A4%94.html</guid><pubDate>Wed, 26 Jun 2024 16:52:32 +0000</pubDate></item><item><title>`StringBuffer` 类常用方法👍</title><link>https://Panda-Z-Coding.github.io/post/%60StringBuffer%60%20-lei-chang-yong-fang-fa-%F0%9F%91%8D.html</link><description>### `StringBuffer`&#13;
&#13;
--------------&#13;
&#13;
1. **构造方法**&#13;
   - `StringBuffer()`：创建一个空的 `StringBuffer` 对象。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/%60StringBuffer%60%20-lei-chang-yong-fang-fa-%F0%9F%91%8D.html</guid><pubDate>Wed, 26 Jun 2024 16:40:24 +0000</pubDate></item><item><title>Swing基础</title><link>https://Panda-Z-Coding.github.io/post/Swing-ji-chu.html</link><description># GUI常用😭&#13;
&#13;
### 容器（Containers）&#13;
&#13;
#### JFrame&#13;
- `setTitle(String title)`：设置窗口标题。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/Swing-ji-chu.html</guid><pubDate>Wed, 26 Jun 2024 13:57:25 +0000</pubDate></item><item><title>Pattern类与Matcher类</title><link>https://Panda-Z-Coding.github.io/post/Pattern-lei-yu-Matcher-lei.html</link><description>&lt;section id='nice' data-tool='markdown编辑器' data-website='https://markdown.com.cn/editor' style='font-size: 16px; padding: 25px 30px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: justify; margin-top: -10px; line-height: 1.25; color: #2b2b2b; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;'&gt;&lt;h1 data-tool='markdown.com.cn编辑器' style='margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 25px;'&gt;&lt;span class='prefix' style='font-weight: bold; color: #40B8FA; display: none;'&gt;&lt;/span&gt;&lt;span class='content' style='display: inline-block; font-weight: bold; color: #40B8FA;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;em style='font-style: normal; color: #3594F7; font-weight: bold;'&gt;&lt;code&gt;Pattern类与Matcher类😋&lt;/code&gt;&lt;/em&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span class='suffix' style='display: inline-block; font-weight: bold; color: #40B8FA;'&gt;&lt;/span&gt;&lt;/h1&gt;&#13;
&lt;h2 data-tool='markdown.com.cn编辑器' style='margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;'&gt;&lt;span class='prefix' style='display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://imgkr.cn-bj.ufileos.com/15fdfb3c-b350-4da9-928e-5f8c506ec325.png); margin-bottom: -22px;'&gt;&lt;/span&gt;&lt;span class='content' style='display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;'&gt;美好一天从学习开始&lt;/span&gt;&lt;span class='suffix' style='display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;'&gt;&lt;/span&gt;&lt;/h2&gt;&#13;
&lt;blockquote data-tool='markdown.com.cn编辑器' style='display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);'&gt;&lt;span style='color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;'&gt;❝&lt;/span&gt;&#13;
&lt;p style='padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;Pattern 和 Matcher两个类是Java里专门用来模式匹配的(检索和指定模式匹配的字符序列)&lt;/code&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&#13;
&lt;span style='float: right; color: RGBA(64, 184, 250, .5);'&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&#13;
&lt;ul data-tool='markdown.com.cn编辑器' style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;使用步骤&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&#13;
&lt;ul style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;1.创建数据源&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&#13;
&lt;ul style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;将一个String对象确定为要进行检索的数据源&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;2.建立Pattern 类对象&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&#13;
&lt;ul style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;Pattern pattern = Pattern.compile(regex); // 封装正则表达式&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;Pattern pattern = Pattern.compile(String regex,int flags); //flags设置匹配模式&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;flags有效值⬇️&lt;/code&gt; &lt;br&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;Pattern.CASE_INSENSITIVE、Pattern.MULTILINE、Pattern.DOTALL、Pattern.UNICODE_CASE、Pattern.CANON_EQ&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;3.得到matcher 对象&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&#13;
&lt;ul style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;Matcher matcher = pattern.matcher(String dataSource) // dataSource就是数据源&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;pattern 调用 matcher() 方法返回一个 Matcher 类型对象&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;4.检索数据&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&#13;
&lt;ul style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;通过各种方法检索dataSource中的数据&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;🌟&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;Matcher类的常用方法&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&#13;
&lt;ul style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;public boolean find() 与 public boolean find(int start)&lt;/code&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt; &lt;br&gt; &lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;寻找与regex匹配的&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;下一个&lt;/code&gt;子序列&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&#13;
&lt;ul style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;em style='font-style: normal; color: #3594F7; font-weight: bold;'&gt;.start() // 子序列开始位置&lt;/em&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;em style='font-style: normal; color: #3594F7; font-weight: bold;'&gt;.end() // ~结束位置&lt;/em&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;public boolean lookingAt() // 判断是否有匹配的子序列（只看一次）&lt;/code&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&#13;
&lt;ul style='margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;'&gt;&#13;
&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;em style='font-style: normal; color: #3594F7; font-weight: bold;'&gt;.start() // 子序列开始位置&lt;/em&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;em style='font-style: normal; color: #3594F7; font-weight: bold;'&gt;.end() // ~结束位置&lt;/em&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;public boolean matchers() // 是否完全匹配&lt;/code&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;public String replaceAll(String replacement) // 返回一个所有能匹配到的子序列替换成replacement的新String对象&lt;/code&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section style='margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;'&gt;&lt;strong style='color: #3594F7; font-weight: bold;'&gt;&lt;span&gt;「&lt;/span&gt;&lt;code style='font-size: 14px; word-wrap: break-word; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: #3594F7; background: RGBA(59, 170, 250, .1); display: inline-block; padding: 0 2px; border-radius: 2px; height: 21px; line-height: 22px;'&gt;public String replaceFirst(String replacement) // 和上面的类似，只不过只替换第一个&lt;/code&gt;&lt;span&gt;」&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&#13;
&lt;/section&gt;。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/Pattern-lei-yu-Matcher-lei.html</guid><pubDate>Mon, 24 Jun 2024 16:15:53 +0000</pubDate></item><item><title>Scanner类</title><link>https://Panda-Z-Coding.github.io/post/Scanner-lei.html</link><description># **_`Scanner类 🤨`_**&#13;
&#13;
&gt; **我们可以用`Scanner`对象解析字符序列中的单词，从而解析出程序需要的数据**&#13;
&gt;&#13;
&#13;
- **Scanner对象**&#13;
  &#13;
```java&#13;
String GDUFE = 'I love GDUFE';&#13;
//利用scanner解析GDUFE中的单词&#13;
Scanner scanner = new Scanner(GDUFE);&#13;
//创建Scanner对象&#13;
```&#13;
&#13;
- **Scanner对象方法**&#13;
  - **`.useDelimiter(正则表达式); // 将正则表达式作为分隔标记`** &#13;
  - **`.next(); // 返回一个单词`**&#13;
  - **`.hasNext() // 判断还有无单词`**&#13;
  - **`.nextInt(); 和 .nextDouble(); // 对于数字类型的单词，用这两个比较妥当；当然如果不是数字类型就不要作死用这个`**&#13;
  - Why? 会发生 **_`InputMismatchException`_** 异常，所以记得放入**try-catch**语句里&#13;
&#13;
&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; - **`🤔所以？这个Scanner和StringTokenizer有什么区别？？`**&#13;
&gt;   - **我们先从他们各自的工作原理看起：**&#13;
&gt;       - **`StringTokenizer` 是把分解出来的单词全部放入对象实体中😟**&#13;
&gt;       - **`Scanner` 是仅存放咋样获取单词分隔标记😲**&#13;
&gt;   - **不同的处理各有什么好处？**&#13;
&gt;       - **`StringTokenizer` 以空间换速度**&#13;
&gt;       - **`Scanner` 以速度换空间**&#13;
&gt;       - **大文件解析可以用`Scanner`，而想要快速知道单词数目得用`StringTokenizer`**&#13;
&gt;   - **`Scanner`中没有`countTokens()`这样的函数，因为实体里面不是单词，想知道单词数量必须一个个取出来**。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/Scanner-lei.html</guid><pubDate>Mon, 24 Jun 2024 12:42:01 +0000</pubDate></item><item><title>StringTokenizer类😊</title><link>https://Panda-Z-Coding.github.io/post/StringTokenizer-lei-%F0%9F%98%8A.html</link><description># **_`StringTokenizer类`_**&#13;
&#13;
&gt;**前言：`StringTokenizer类` 和 `split()` 不同之处在于前者不使用`正则表达式`做分隔标记**&#13;
&#13;
- ### **_`两种构造方法`_**&#13;
```java&#13;
StringTokenizer(String s)               //为s构造一个分析器,使用默认分隔符 &#13;
StringTokenizer(String s,String delim)  //为s构造一个分析器，参数delim的字符的 任意排列 作为分隔标记&#13;
```&#13;
- ### **_StringTokenizer的操作方法_**&#13;
&#13;
&gt;**我们称StringTokenizer对象是一个字符序列分析器，它封装的数据是若干个单词。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/StringTokenizer-lei-%F0%9F%98%8A.html</guid><pubDate>Mon, 24 Jun 2024 10:39:16 +0000</pubDate></item><item><title>String类中关于正则表达式的方法😋</title><link>https://Panda-Z-Coding.github.io/post/String-lei-zhong-guan-yu-zheng-ze-biao-da-shi-de-fang-fa-%F0%9F%98%8B.html</link><description># **_`String类中关于正则表达式的方法😋`_**&#13;
&#13;
## **字符序列的替换** &#13;
~~~java&#13;
public String replaceAll(String regex,String replacement) &#13;
        // 返回一个由replacement匹配regex之后的新String对象&#13;
~~~&#13;
&#13;
## **字符序列的分解**&#13;
~~~java&#13;
public String[] split(String regex); &#13;
        //通过regex的正则表达式来分割当前String对象&#13;
~~~&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; `split()`方法认为分隔符标记的`左右都是单词`，所以若左边是空字符，那么这个`空字符`算作`第一个单词!`&lt;br&gt;&#13;
&gt; 例如:`String str = '公元1949年10月1日是中华人民共和国成立的日子'` &lt;br&gt; 当我们对其使用 `regex = '//D+'` 作为标记符时，数组里面的长度是`4`而不是`3` !&#13;
&#13;
。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/String-lei-zhong-guan-yu-zheng-ze-biao-da-shi-de-fang-fa-%F0%9F%98%8B.html</guid><pubDate>Mon, 24 Jun 2024 08:56:07 +0000</pubDate></item><item><title>常见-正则表达式😍</title><link>https://Panda-Z-Coding.github.io/post/chang-jian---zheng-ze-biao-da-shi-%F0%9F%98%8D.html</link><description># **_`常见-正则表达式😍`_**&#13;
&#13;
- **`匹配整数`**&#13;
```java&#13;
String regex = '-?[1-9]\\d*';&#13;
```&#13;
&#13;
- **`匹配浮点数`**&#13;
```java&#13;
String regex = '-?[0-9][0-9]*[.][0-9]+';&#13;
```&#13;
&#13;
- **`匹配 E-mail 形式`**&#13;
```java&#13;
String regex = '\\w+@\\w+\\.[a-z]+(\\.[a-z]+)?';&#13;
```&#13;
&#13;
- **`匹配身份证号码`**&#13;
```java&#13;
String regex = '[1-9][0-9]{16}[a-zA-Z0-9]{1}';&#13;
```&#13;
- **`匹配日期`**&#13;
```java&#13;
String year = '[1-9][0-9]{3}'; // 年限4位数&#13;
String month = '((0?[1-9])|(1[012]))' //用到 | 时要括号括起整个表达式&#13;
String day = '((0?[1-9])|([12][0-9])|(3[01]?))'&#13;
String regex = year + '[-./]' + mouth + '-./' + day;  //分隔符可DIY&#13;
```&#13;
- **`匹配URL`**&#13;
```java&#13;
String regex = '(https?|ftp)://[^\\s/$.?#].[^\\s]*';&#13;
```&#13;
这个正则表达式可以匹配HTTP和FTP协议的URL&#13;
&#13;
- **`匹配IP地址`**&#13;
```java&#13;
String regex = '\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b';&#13;
```&#13;
这个正则表达式可以匹配IPv4地址。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/chang-jian---zheng-ze-biao-da-shi-%F0%9F%98%8D.html</guid><pubDate>Sun, 23 Jun 2024 16:14:10 +0000</pubDate></item><item><title>正则表达式!启动!🤐</title><link>https://Panda-Z-Coding.github.io/post/zheng-ze-biao-da-shi-%21-qi-dong-%21%F0%9F%A4%90.html</link><description># **_`正则表达式!启动!`_**&#13;
&#13;
### 正则表达式与元字符&#13;
&#13;
#### _1.定义:_ &#13;
&gt;😎一个String对象的字符序列中具有特殊意义的字符叫做 **_元字符_** !&lt;br&gt;😮正则表达式是一个**String对象的字符序列**&#13;
&#13;
~~~java&#13;
public boolean matches(String regex); // 判断String对象的字符序列是否和参数regex的正则表达式匹配&#13;
~~~&#13;
&#13;
##### **_常用元字符表😍_**&#13;
&#13;
|`正则表达式`|`意义`|&#13;
|:----------|:-----|&#13;
|**.**|表示任何一个字符|&#13;
|**\\\\.**|代表 **.** 这个字符|&#13;
|**\\\\d**|0 ~ 9 任何一个数字|&#13;
|**\\\\D**|非数字字符|&#13;
|**\\\\s**|空格类字符，例 _\t \n \x0B(垂直制表符) \f(换页符) \r(回车符)_|&#13;
|**\\\\S**|非空格类|&#13;
|**\\\\w**|可用于标识符的字符|&#13;
|**\\\\W**|不能用于标识符|&#13;
|**\\\\p{Lower}**|小写a ~ z|&#13;
|**\\\\p{Upper}**|大写A ~ Z|&#13;
|**\\\\p{ASCII}**|ASCII码|&#13;
|**\\\\p{Alpha}**|字母|&#13;
|**\\\\p{Digit}**|0 ~ 9 任何数字|&#13;
|**\\\\p{Alnum}**|数字或者字母|&#13;
|**\\\\p{Punct}**|标点符号：键盘上面你能在数字和字母外打出来符号|&#13;
|**\\\\p{Graph}**|可视标点：\p{Alnum} \p{Punct}|&#13;
|**\\\\p{Print}**|可打印的|&#13;
|**\\\\p{Blank}**|空格或者制表符|&#13;
|**\\\\p{Cntrl}**|控制符：[\x00 ~\\x1F\\x7F] (附表1附加解释)|&#13;
&#13;
&gt;&gt;`补充说明`🤐 &lt;br&gt;**\\\\d 与 \\\\p{Digit}** 不同之处在于 &gt;&gt;&gt; 前者匹配的是ASCII码，而后者匹配的是Unicode码。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/zheng-ze-biao-da-shi-%21-qi-dong-%21%F0%9F%A4%90.html</guid><pubDate>Sun, 23 Jun 2024 14:49:06 +0000</pubDate></item><item><title>String常用方法👌</title><link>https://Panda-Z-Coding.github.io/post/String-chang-yong-fang-fa-%F0%9F%91%8C.html</link><description># **_String常用方法👌_**&#13;
&#13;
### 「操作String的方法」&#13;
&#13;
```java&#13;
public int length()                             // 获取长度&#13;
public boolean equals(String s)                 // 查看两个String对象是否相等&#13;
public boolean startsWith(String s)             // 前缀是否是s&#13;
public boolean endsWith(String s)               // 后缀是否是s&#13;
public int compareTo(String s)                  // 通过字典序比较，返回正值、0、负数&#13;
public boolean contains(String s)               // 判断String对象里是否含有 s&#13;
public int indexOf(String s)                    // 返回首次出现s的位置&#13;
public int lastIndexOf(String s)                // 返回最后一次出现s的位置&#13;
public String subString(int startpoint)         // 获得一个从该位置到最后的新String对象&#13;
public String subString(int start,int end)      // 类似上一个，可以指定最后的位置&#13;
public String trim()                            // 获得该对象去除前后空格的新对象&#13;
&#13;
```&#13;
&#13;
### 「String对象和基本数据类型的转换⇄」&#13;
&#13;
 _**String ➡️ 基本型**_&#13;
&#13;
~~~java&#13;
public static byte parseByte(String s) throws NumberFormatException&#13;
public static short parseShort(String s) throws NumberFormatException&#13;
public static long parseLong(String s) throws NumberFormatException&#13;
public static float parseFloat(String s) throws NumberFormatException&#13;
public static double parseDouble(String s) throws NumberFormatException&#13;
~~~&#13;
&#13;
_**基本型 ➡️ String**_&#13;
&#13;
```java&#13;
public static String valueOf(_数据类型_ n) //返回一个String对象的引用&#13;
```&#13;
&#13;
_**基本类型的进制表示**_&#13;
&#13;
~~~java&#13;
public static String toBinaryString(int i) // 返回i的二进制String表示&#13;
public static String toOctalString(int i) // 八进制&#13;
public static String toHexString(int i) // 十六进制&#13;
// int i 或者 long i 都可以&#13;
~~~&#13;
&#13;
_**main()方法的参数化💕**_&#13;
&#13;
​      main()方法中的args[] 可以接受从键盘上面键入的字符序列（相当于数组），在运行时可以像以下来键入&#13;
&#13;
&gt; java 主类名 数据1 数据2 ...&#13;
&#13;
### 「对象的String对象表示」&#13;
&#13;
对一个对象调用 toString() 方法会返回String对象的字符序列串&#13;
&#13;
&gt; 一般形式：&#13;
&gt;&#13;
&gt; 创建对象的类名@对象的引用的字符序列串&#13;
&#13;
🤔要注意的是：toString() 是Object类的方法，是可以被重写的&#13;
&#13;
&#13;
&#13;
### 「**String对象与字符数组、字节数组**」&#13;
&#13;
_**String对象与字符数组**_&#13;
&#13;
```java&#13;
public viod getChars(int start,int end,char c[],int offset) // 将String对象的字符序列start到end-1列放入数组里&#13;
public char[] toCharArray() //全部String的字符序列返回成一个字符数组&#13;
```&#13;
&#13;
_**String对象与字节数组**_&#13;
&#13;
&gt;String类中 **String(byte[])** 和 **String(byte[],int offset,int length)** 可以让我们用指定的字节数组的部分或者全部来创建String对象&#13;
&#13;
~~~java&#13;
public byte[] getBytes() // 用平台默认的字符编码将String对象放入字节数组用，并返回引用&#13;
public byte[] getBytes(String charsetName) // 指定字符编码。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/String-chang-yong-fang-fa-%F0%9F%91%8C.html</guid><pubDate>Sat, 22 Jun 2024 16:26:36 +0000</pubDate></item><item><title>Java中的子类与继承基础知识</title><link>https://Panda-Z-Coding.github.io/post/Java-zhong-de-zi-lei-yu-ji-cheng-ji-chu-zhi-shi.html</link><description># **Java中的子类与继承基础知识**&#13;
&#13;
## 目录&#13;
&#13;
- [子类与父类](#子类与父类)&#13;
- [子类继承性](#子类继承性)&#13;
- [子类与对象](#子类与对象)&#13;
- [成员变量的隐蔽和方法重写](#成员变量的隐蔽和方法重写)&#13;
- [super关键字](#super关键字)&#13;
- [final关键字](#final关键字)&#13;
- [对象的上转型对象](#对象的上转型对象)&#13;
- [继承与多态](#继承与多态)&#13;
- [abstract类与abstract方法](#abstract类与abstract方法)&#13;
- [面向抽象编程](#面向抽象编程)&#13;
- [开-闭原则](#开-闭原则)&#13;
&#13;
## 子类与父类&#13;
&#13;
在Java中，通过**继承**机制，子类（Subclass）可以继承父类（Superclass）的属性和方法。</description><guid isPermaLink="true">https://Panda-Z-Coding.github.io/post/Java-zhong-de-zi-lei-yu-ji-cheng-ji-chu-zhi-shi.html</guid><pubDate>Sat, 22 Jun 2024 15:50:02 +0000</pubDate></item></channel></rss>